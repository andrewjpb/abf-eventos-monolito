generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model address {
  id          String   @id
  cityId      String
  stateId     String
  street      String
  number      String
  postal_code String
  complement  String
  created_at  DateTime @default(now())
  updatedAt   DateTime @default(now())
  cities      cities   @relation(fields: [cityId], references: [id])
  states      states   @relation(fields: [stateId], references: [id])
  events      events[]
}

model attendance_list {
  id                 String   @id
  eventId            String
  userId             String
  company_cnpj       String
  company_segment    String
  attendee_full_name String
  attendee_email     String
  attendee_position  String
  attendee_rg        String
  attendee_cpf       String
  checked_in         Boolean
  created_at         DateTime @default(now())
  updatedAt          DateTime @default(now())
  mobile_phone       String
  attendee_type      String
  company            company  @relation(fields: [company_cnpj], references: [cnpj])
  events             events   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  users              users    @relation(fields: [userId], references: [id])

  @@unique([eventId, attendee_email, attendee_cpf, attendee_rg])
}

model cities {
  id      String    @id
  name    String
  stateId String?
  address address[]
  states  states?   @relation(fields: [stateId], references: [id])

  @@unique([name, stateId])
}

model company {
  id              String            @id
  name            String
  cnpj            String            @unique
  segment         String
  active          Boolean           @default(true)
  created_at      DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  attendance_list attendance_list[]
  users           users[]
}

model events {
  id                  String            @id
  title               String
  slug                String            @unique
  image_url           String            @default("")
  thumb_url           String            @default("")
  image_path          String            @default("")
  thumb_path          String            @default("")
  ticket_img_path     String            @default("")
  summary             String
  description         String
  date                DateTime
  isStreaming         Boolean           @default(false)
  transmission_link   String            @default("")
  vacancy_total       Int
  vacancies_per_brand Int
  minimum_quorum      Int
  highlight           Boolean
  start_time          String
  end_time            String
  format              String
  addressId           String
  created_at          DateTime          @default(now())
  updatedAt           DateTime          @default(now())
  schedule_link       String            @default("")
  free_online         Boolean           @default(false)
  isPublished         Boolean           @default(false)
  attendance_list     attendance_list[]
  address             address           @relation(fields: [addressId], references: [id])
  speakers            speakers[]        @relation("EventToSpeaker")
  sponsors            sponsors[]        @relation("EventToSponsor")
  supporters          supporters[]      @relation("EventToSupporter")
  schedule            event_schedule[]
}

model event_schedule {
  id          String   @id
  eventId     String
  day_date    DateTime // Data específica do dia da programação
  start_time  String // Horário de início (ex: "09:00")
  end_time    String // Horário de fim (ex: "10:30")
  title       String // Título da atividade
  description String? // Descrição da atividade (opcional)
  order_index Int      @default(0) // Ordem na timeline
  created_at  DateTime @default(now())
  updatedAt   DateTime @default(now())

  event events @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_schedule")
}

model external_events {
  id          String   @id
  title       String
  description String
  date        DateTime
  event_link  String
  image_url   String
  thumb_url   String
  highlight   Boolean
  created_at  DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("external-events")
}

model highlight_card {
  id            String   @id
  title         String
  image_url     String
  external_link String
  active        Boolean  @default(true)
  created_at    DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model permissions {
  id          String   @id
  name        String   @unique
  description String
  created_at  DateTime @default(now())
  updatedAt   DateTime @default(now())
  roles       roles[]  @relation("PermissionToRole")
}

model reset_password_token {
  id         String   @id
  token      String   @unique
  otp        String
  userId     String
  expiresAt  DateTime
  used       Boolean  @default(false)
  created_at DateTime @default(now())
  updatedAt  DateTime @default(now())
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model roles {
  id          String        @id
  name        String        @unique
  description String
  created_at  DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  permissions permissions[] @relation("PermissionToRole")
  users       users[]       @relation("RoleToUser")
}

model speakers {
  id          String   @id
  description String?
  moderatorId String   @unique
  created_at  DateTime @default(now())
  updatedAt   DateTime @default(now())
  users       users    @relation(fields: [moderatorId], references: [id])
  events      events[] @relation("EventToSpeaker")
}

model sponsors {
  id          String   @id
  name        String   @unique
  image_url   String   @default("")
  thumb_url   String   @default("")
  image_path  String   @default("")
  thumb_path  String   @default("")
  created_at  DateTime @default(now())
  updatedAt   DateTime @default(now())
  description String?
  active      Boolean  @default(true)
  events      events[] @relation("EventToSponsor")
}

model states {
  id      String    @id
  uf      String    @unique
  name    String    @unique
  address address[]
  cities  cities[]
}

model supporters {
  id         String   @id
  name       String   @unique
  image_url  String   @default("")
  thumb_url  String   @default("")
  image_path String   @default("")
  thumb_path String   @default("")
  created_at DateTime @default(now())
  updatedAt  DateTime @default(now())
  active     Boolean  @default(true)
  events     events[] @relation("EventToSupporter")
}

model event_sponsor_order {
  id         String   @id @default(uuid())
  eventId    String
  sponsorId  String
  order      Int      @default(0)
  created_at DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@unique([eventId, sponsorId])
  @@index([eventId])
  @@index([order])
}

model event_supporter_order {
  id          String   @id @default(uuid())
  eventId     String
  supporterId String
  order       Int      @default(0)
  created_at  DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@unique([eventId, supporterId])
  @@index([eventId])
  @@index([order])
}

model users {
  id                    String                 @id
  name                  String
  username              String                 @unique
  email                 String                 @unique
  password              String
  active                Boolean                @default(true)
  rg                    String                 @unique
  cpf                   String                 @unique
  cnpj                  String
  mobile_phone          String                 @unique
  position              String
  city                  String
  state                 String
  image_url             String                 @default("")
  thumb_url             String                 @default("")
  image_path            String                 @default("")
  thumb_path            String                 @default("")
  created_at            DateTime               @default(now())
  updatedAt             DateTime               @default(now())
  email_verified        Boolean                @default(false)
  AppLog                AppLog[]
  attendance_list       attendance_list[]
  Session               Session[]
  speakers              speakers?
  reset_password_tokens reset_password_token[]
  company               company                @relation(fields: [cnpj], references: [cnpj])
  roles                 roles[]                @relation("RoleToUser")
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model AppLog {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  level     String
  action    String
  message   String
  userId    String?
  meta      Json?
  user      users?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([level])
}
